/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CakeChuff.java
 *
 * Created on 21-may-2009, 1:54:40
 */

package cc;

import java.awt.Color;
import java.io.File;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import com.jme.app.AbstractGame.ConfigShowMode;

import cc.automatons.Automaton;
import cc.automatons.BlisterAutomaton;
import cc.automatons.CakeAutomaton;
import cc.automatons.MasterAutomaton;
import cc.automatons.QCAutomaton;
import cc.simulation.state.ControlInterface;
import cc.simulation.subsystems.Factory;

/**
 * CakeChuff class is the one in charge of executing the rest of the aplication
 * and in charge of starting and finishing every thread.
 */
public class CakeChuff extends javax.swing.JFrame {

	private static Logger logger = Logger.getLogger(CakeChuff.class.getName());
    // Subsystems IDs
    private final int SCADA=1;
    private final int MASTER=2;
    private final int CAKES=3;
    private final int BLISTERS=4;
    private final int QUALITY=5;

    // Threads of every subsystem
    private Automaton masterAutomaton = null;
    private Automaton cakesAutomaton = null;
    private Automaton blisterAutomaton = null;
    private Automaton qualityAutomaton = null;
    /** Creates new form CakeChuff */
    public CakeChuff() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        RunEveryThingButton = new javax.swing.JToggleButton();
        RunSCADAButton = new javax.swing.JToggleButton();
        RunMasterButton = new javax.swing.JToggleButton();
        RunCakeSubsystemButton = new javax.swing.JToggleButton();
        RunBlisterSubsystemButton = new javax.swing.JToggleButton();
        RunQualitySubystemButton = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(6, 0));

        RunEveryThingButton.setText("Run All the Systems");
        RunEveryThingButton.setMaximumSize(new java.awt.Dimension(100, 23));
        RunEveryThingButton.setMinimumSize(new java.awt.Dimension(100, 23));
        RunEveryThingButton.setPreferredSize(new java.awt.Dimension(140, 50));
        RunEveryThingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunEveryThingButtonActionPerformed(evt);
            }
        });
        jPanel1.add(RunEveryThingButton);

        RunSCADAButton.setForeground(new java.awt.Color(255, 102, 102));
        RunSCADAButton.setText("SCADA is OFF");
        RunSCADAButton.setMaximumSize(new java.awt.Dimension(100, 23));
        RunSCADAButton.setMinimumSize(new java.awt.Dimension(100, 23));
        RunSCADAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunSCADAButtonActionPerformed(evt);
            }
        });
        jPanel1.add(RunSCADAButton);

        RunMasterButton.setForeground(new java.awt.Color(255, 102, 102));
        RunMasterButton.setText("Master Subsystem is OFF");
        RunMasterButton.setMaximumSize(new java.awt.Dimension(100, 23));
        RunMasterButton.setMinimumSize(new java.awt.Dimension(100, 23));
        RunMasterButton.setPreferredSize(new java.awt.Dimension(100, 23));
        RunMasterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunMasterButtonActionPerformed(evt);
            }
        });
        jPanel1.add(RunMasterButton);

        RunCakeSubsystemButton.setForeground(new java.awt.Color(255, 102, 102));
        RunCakeSubsystemButton.setText("Cake Subsystem is OFF");
        RunCakeSubsystemButton.setMaximumSize(new java.awt.Dimension(100, 23));
        RunCakeSubsystemButton.setMinimumSize(new java.awt.Dimension(100, 23));
        RunCakeSubsystemButton.setPreferredSize(new java.awt.Dimension(100, 23));
        RunCakeSubsystemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunCakeSubsystemButtonActionPerformed(evt);
            }
        });
        jPanel1.add(RunCakeSubsystemButton);

        RunBlisterSubsystemButton.setForeground(new java.awt.Color(255, 102, 102));
        RunBlisterSubsystemButton.setText("Blisters Subsystem is OFF");
        RunBlisterSubsystemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunBlisterSubsystemButtonActionPerformed(evt);
            }
        });
        jPanel1.add(RunBlisterSubsystemButton);

        RunQualitySubystemButton.setForeground(new java.awt.Color(255, 102, 102));
        RunQualitySubystemButton.setText("Quality Subsystem is OFF");
        RunQualitySubystemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunQualitySubystemButtonActionPerformed(evt);
            }
        });
        jPanel1.add(RunQualitySubystemButton);

        jLabel1.setText("Threads");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RunCakeSubsystemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunCakeSubsystemButtonActionPerformed
        if(RunEveryThingButton.isEnabled()) RunEveryThingButton.setEnabled(false);
        if(RunCakeSubsystemButton.isSelected()){
            startSubsystem(CAKES);
            RunCakeSubsystemButton.setText("Cakes Subsystem is ON");
            RunCakeSubsystemButton.setForeground(Color.GREEN);
            RunCakeSubsystemButton.setSelected(true);
        } else {
            stopSubsystem(CAKES);
            RunCakeSubsystemButton.setText("Cakes Subsystem is OFF");
            RunCakeSubsystemButton.setForeground(Color.RED);
            RunCakeSubsystemButton.setSelected(false);
        }
}//GEN-LAST:event_RunCakeSubsystemButtonActionPerformed

    private void RunBlisterSubsystemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunBlisterSubsystemButtonActionPerformed
        if(RunEveryThingButton.isEnabled()) RunEveryThingButton.setEnabled(false);
        if(RunBlisterSubsystemButton.isSelected()){
            startSubsystem(BLISTERS);
            RunBlisterSubsystemButton.setText("Blisters Subsystem is ON");
            RunBlisterSubsystemButton.setForeground(Color.GREEN);
            RunBlisterSubsystemButton.setSelected(true);
        } else {
            stopSubsystem(BLISTERS);
            RunBlisterSubsystemButton.setText("Blisters Subsystem is OFF");
            RunBlisterSubsystemButton.setForeground(Color.RED);
            RunBlisterSubsystemButton.setSelected(false);
        }
}//GEN-LAST:event_RunBlisterSubsystemButtonActionPerformed

    private void RunEveryThingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunEveryThingButtonActionPerformed
        startSubsystem(SCADA);
        RunSCADAButton.setText("SCADA is ON");
        RunSCADAButton.setForeground(Color.GREEN);
        RunSCADAButton.setSelected(true);
        startSubsystem(MASTER);
        RunMasterButton.setText("Master is ON");
        RunMasterButton.setForeground(Color.GREEN);
        RunMasterButton.setSelected(true);
        startSubsystem(CAKES);
        RunCakeSubsystemButton.setText("Cakes Subystem is ON");
        RunCakeSubsystemButton.setForeground(Color.GREEN);
        RunCakeSubsystemButton.setSelected(true);
        startSubsystem(BLISTERS);
        RunBlisterSubsystemButton.setText("Blisters Subystem is ON");
        RunBlisterSubsystemButton.setForeground(Color.GREEN);
        RunBlisterSubsystemButton.setSelected(true);
        startSubsystem(QUALITY);
        RunQualitySubystemButton.setText("Quality Subystem is ON");
        RunQualitySubystemButton.setForeground(Color.GREEN);
        RunQualitySubystemButton.setSelected(true);

        RunEveryThingButton.setEnabled(false);
}//GEN-LAST:event_RunEveryThingButtonActionPerformed

    private void RunSCADAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunSCADAButtonActionPerformed
        if(RunEveryThingButton.isEnabled()) RunEveryThingButton.setEnabled(false);
        if(RunSCADAButton.isSelected()){
            startSubsystem(SCADA);
            RunSCADAButton.setText("SCADA is ON");
            RunSCADAButton.setForeground(Color.GREEN);
            RunSCADAButton.setSelected(true);
        } else {
            stopSubsystem(SCADA);
            RunSCADAButton.setText("SCADA is OFF");
            RunSCADAButton.setForeground(Color.RED);
            RunSCADAButton.setSelected(false);
        }
    }//GEN-LAST:event_RunSCADAButtonActionPerformed

    private void RunMasterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunMasterButtonActionPerformed
        if(RunEveryThingButton.isEnabled()) RunEveryThingButton.setEnabled(false);
        if(RunMasterButton.isSelected()){
            startSubsystem(MASTER);
            RunMasterButton.setText("Master is ON");
            RunMasterButton.setForeground(Color.GREEN);
            RunMasterButton.setSelected(true);
        } else {
            stopSubsystem(MASTER);
            RunMasterButton.setText("Master is OFF");
            RunMasterButton.setForeground(Color.RED);
            RunMasterButton.setSelected(false);
        }
    }//GEN-LAST:event_RunMasterButtonActionPerformed

    private void RunQualitySubystemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunQualitySubystemButtonActionPerformed
        if(RunEveryThingButton.isEnabled()) RunEveryThingButton.setEnabled(false);
        if(RunQualitySubystemButton.isSelected()){
            startSubsystem(QUALITY);
            RunQualitySubystemButton.setText("Quality Subsystem is ON");
            RunQualitySubystemButton.setForeground(Color.GREEN);
            RunQualitySubystemButton.setSelected(true);
        } else {
            stopSubsystem(QUALITY);
            RunQualitySubystemButton.setText("Quality Subsystem is ON");
            RunQualitySubystemButton.setForeground(Color.RED);
            RunQualitySubystemButton.setSelected(false);
        }
    }//GEN-LAST:event_RunQualitySubystemButtonActionPerformed

    private void startSubsystem(int id){
        switch(id){
            case MASTER:
            	
            	masterAutomaton = new MasterAutomaton("localhost",9009,9008,
            								 "localhost",9000,9001,
            								 "localhost",9003,9002,
            								 "localhost",9005,9004);
                break;
            case SCADA:
            	java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        try {
                            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(ControlInterface.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (InstantiationException ex) {
                            Logger.getLogger(ControlInterface.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IllegalAccessException ex) {
                            Logger.getLogger(ControlInterface.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (UnsupportedLookAndFeelException ex) {
                            Logger.getLogger(ControlInterface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        new ControlInterface().setVisible(true);
                    }
                });
                break;
            case CAKES:            	
            	cakesAutomaton = new CakeAutomaton(9001,9000,"localhost");            	
                break;
            case BLISTERS:
            	blisterAutomaton = new BlisterAutomaton(9002,9003,"localhost");        		
                break;
            case QUALITY:
            	qualityAutomaton = new QCAutomaton(9004,9005,"localhost");
                break;
        }
    }

    private void stopSubsystem(int id){
        switch(id){
            case MASTER:
            	masterAutomaton.destroyAutomaton();
                break;
            case SCADA:
                break;
            case CAKES:
            	cakesAutomaton.destroyAutomaton();
                break;
            case BLISTERS:
            	blisterAutomaton.destroyAutomaton();
                break;
            case QUALITY:
            	qualityAutomaton.destroyAutomaton();
                break;
        }
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
    	
    	try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            logger.log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
        	logger.log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
        	logger.log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
        	logger.log(Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CakeChuff().setVisible(true);
            }
        });
        
        Factory factory = new Factory();
		try {
			factory.setConfigShowMode(ConfigShowMode.AlwaysShow, new File("")
					.toURI().toURL());
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}

		factory.start();        	
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton RunBlisterSubsystemButton;
    private javax.swing.JToggleButton RunCakeSubsystemButton;
    private javax.swing.JToggleButton RunEveryThingButton;
    private javax.swing.JToggleButton RunMasterButton;
    private javax.swing.JToggleButton RunQualitySubystemButton;
    private javax.swing.JToggleButton RunSCADAButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
