/*
 * ControlInterface.java
 *
 * Created on 27-mar-2009, 0:13:19
 */

package cc.simulation.state;

import java.awt.Image;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

//import javax.swing.Timer;
import java.awt.Event.*;
import java.io.File;
import java.util.TimerTask;
import java.util.Timer;

import cc.scada.*;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author cakechuff team
 */
public class ControlInterface extends javax.swing.JFrame implements ActionListener, ChangeListener {

        private SCADA _scada;
       
        //array con los valores de la interfaz
        private int [] _params = new int [14];
        
        //Time when the start was clicked
        private long initTime =0;
        
        private int hours, minutes, seconds;
        private static Timer time = null;
        
        private boolean hasStarted = false;
        
        private JFileChooser fc;
        
    /** Creates new form ControlInterface */
    public ControlInterface() {

        _scada = new SCADA(this);
            	    	
        initComponents();
               
        //Here all the fields must be filled with its value
        for (int i =0; i < _params.length; i++){
            _params[i] = -1;
        }
        
        setIconImage(new ImageIcon(getClass().getResource("/cc/images/iconCakeChuff.png")).getImage());
        
        //To set all the spinners, to the correct value from the database of SCADA
        this.updateValues();
        
        //To set the values in the reports up to date
        this.updateStadistics();
        
        //The start button must be enable, and the others disables untill the factory is working
        this.StopButton.setEnabled(false);
        this.EmergencyButton.setEnabled(false);    
        
        this.timelaststartup.setText("00:00:00");
        
        this.startTimer();
      
    }
    
    	private void startTimer() {
		if (time == null) {
			time = new Timer();
		}
		time.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				doAction();
			}
		}, 0, 1000);
	}

	protected void doAction() {

            if (seconds != 59) {
                    seconds++;
            } else {
                    if (minutes != 59) {
                            minutes++;
                    } else {
                            hours++;
                            minutes = 00;
                    }
                    seconds = 00;
            }
            
            String h, m, s = null;
            if (hours < 10){
                h = "0" + hours; 
            }else{
                h= hours +"";
            }
            if (minutes < 10){
                m = "0" + minutes; 
            }else{
                m = minutes + "";
            }
            if (seconds < 10){
                s = "0" + seconds; 
            }else{
                s= seconds + "";
            }
            
            this.workingtime.setText(h +  ":" + m + ":" + s);
            
            if (hasStarted){
                initTime++;
                String ht= null;
                String mt = null;
                String st = null;
                int ht2, mt2,sm2 = -1;
                sm2 = (int)(initTime%60);
                mt2 = (int)(initTime/60);
                ht2 = (int)(initTime/3600);
                
                if (ht2 < 10){
                    ht = "0" + ht2; 
                }else{
                    ht= ht2 +"";
                }
                if (mt2 < 10){
                    mt = "0" + mt2; 
                }else{
                    mt= mt2 +"";
                }
                if (sm2 < 10){
                    st = "0" + sm2; 
                }else{
                    st= sm2 +"";
                }
                
                this.timelaststartup.setText(ht +  ":" + mt + ":" + st);
            }
	}
 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabbedPane = new javax.swing.JTabbedPane();
        ControlTab = new javax.swing.JPanel();
        BlisterPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        spinnerBeltSpeed2 = new javax.swing.JSpinner();
        spinnerBeltLenght2 = new javax.swing.JSpinner();
        CakePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        spinnerBeltLenght1 = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        spinnerChoc = new javax.swing.JSpinner();
        spinnerBeltSpeed1 = new javax.swing.JSpinner();
        spinnerCakesCapacity = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        spinnerCaramel = new javax.swing.JSpinner();
        QualityPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        spinnerBeltSpeed3 = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        spinnerBeltLenght3 = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        spinnerRobot2Pick = new javax.swing.JSpinner();
        jLabel23 = new javax.swing.JLabel();
        spinnerSealingTIme = new javax.swing.JSpinner();
        spinnerFailRange = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        StartButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        EmergencyButton = new javax.swing.JButton();
        BlisterPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        spinnerRobot1PickCake = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        spinnerRobot1MoveBlister = new javax.swing.JSpinner();
        ResetButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        ControlTab1 = new javax.swing.JPanel();
        LastExecution = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        okblisters = new javax.swing.JLabel();
        koblisters = new javax.swing.JLabel();
        History = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        okcake = new javax.swing.JLabel();
        kocake = new javax.swing.JLabel();
        Executions = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        starts = new javax.swing.JLabel();
        stops = new javax.swing.JLabel();
        emerstops = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        cicles = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        timelaststartup = new javax.swing.JLabel();
        workingtime = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        GeneratePDF = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CakeChuff Control Panel");
        setAlwaysOnTop(true);
        setName("CakechuffControlPanel"); // NOI18N
        setResizable(false);

        BlisterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Blister Subsystem", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel11.setText("Conveyor Belt Speed:");

        jLabel12.setText("Conveyor Belt Lenght (meters):");

        spinnerBeltSpeed2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 40, 1));
        spinnerBeltSpeed2.setName("beltspeed2"); // NOI18N
        spinnerBeltSpeed2.addChangeListener(this);

        spinnerBeltLenght2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 40, 1));
        spinnerBeltLenght2.setName("beltlenght2l"); // NOI18N
        spinnerBeltLenght2.addChangeListener(this);

        javax.swing.GroupLayout BlisterPanelLayout = new javax.swing.GroupLayout(BlisterPanel);
        BlisterPanel.setLayout(BlisterPanelLayout);
        BlisterPanelLayout.setHorizontalGroup(
            BlisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BlisterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BlisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BlisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinnerBeltLenght2, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(spinnerBeltSpeed2))
                .addContainerGap())
        );
        BlisterPanelLayout.setVerticalGroup(
            BlisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BlisterPanelLayout.createSequentialGroup()
                .addGroup(BlisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(spinnerBeltSpeed2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BlisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(spinnerBeltLenght2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CakePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cake Subsystem", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel1.setText("Conveyor Belt Speed:");

        jLabel13.setText("Chocolate Valve (secs):");

        spinnerBeltLenght1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 40, 1));
        spinnerBeltLenght1.setName("beltlenght"); // NOI18N
        spinnerBeltLenght1.addChangeListener(this);

        jLabel14.setText("Caramel Valve (secs):");

        spinnerChoc.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        spinnerChoc.setName("choc"); // NOI18N
        spinnerChoc.addChangeListener(this);

        spinnerBeltSpeed1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 40, 1));
        spinnerBeltSpeed1.setName("beltspeed"); // NOI18N
        spinnerBeltSpeed1.addChangeListener(this);

        spinnerCakesCapacity.setModel(new javax.swing.SpinnerNumberModel(0, 0, 51, 1));
        spinnerCakesCapacity.setName("Cakes"); // NOI18N
        spinnerCakesCapacity.addChangeListener(this);

        jLabel2.setText("Cakes capacity:");

        jLabel22.setText("Conveyor Belt Lenght (meters):");

        spinnerCaramel.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        spinnerCaramel.setName("caramel"); // NOI18N
        spinnerCaramel.addChangeListener(this);

        javax.swing.GroupLayout CakePanelLayout = new javax.swing.GroupLayout(CakePanel);
        CakePanel.setLayout(CakePanelLayout);
        CakePanelLayout.setHorizontalGroup(
            CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CakePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CakePanelLayout.createSequentialGroup()
                        .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerChoc, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(spinnerBeltLenght1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerBeltSpeed1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(spinnerCakesCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CakePanelLayout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerCaramel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        CakePanelLayout.setVerticalGroup(
            CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CakePanelLayout.createSequentialGroup()
                .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spinnerCakesCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerBeltSpeed1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerBeltLenght1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerChoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CakePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(spinnerCaramel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        QualityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Quality Subsystem", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel15.setText("Conveyor Belt Speed:");

        spinnerBeltSpeed3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 40, 1));
        spinnerBeltSpeed3.setName("beltspeed3"); // NOI18N
        spinnerBeltSpeed3.addChangeListener(this);

        jLabel17.setText("Sealing Time (secs):");

        spinnerBeltLenght3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 40, 1));
        spinnerBeltLenght3.setName("beltlenght3"); // NOI18N
        spinnerBeltLenght3.addChangeListener(this);

        jLabel18.setText("Robot: Pick Blister (secs):");

        spinnerRobot2Pick.setModel(new javax.swing.SpinnerNumberModel(0, 0, 20, 1));
        spinnerRobot2Pick.setName("robot2time"); // NOI18N
        spinnerRobot2Pick.addChangeListener(this);

        jLabel23.setText("Failure Range (%):");

        spinnerSealingTIme.setModel(new javax.swing.SpinnerNumberModel(0, 0, 20, 1));
        spinnerSealingTIme.setName("sealtime"); // NOI18N
        spinnerSealingTIme.addChangeListener(this);

        spinnerFailRange.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        spinnerFailRange.setName("failrange"); // NOI18N
        spinnerFailRange.addChangeListener(this);

        jLabel26.setText("Conveyor Belt Lenght (meters):");

        javax.swing.GroupLayout QualityPanelLayout = new javax.swing.GroupLayout(QualityPanel);
        QualityPanel.setLayout(QualityPanelLayout);
        QualityPanelLayout.setHorizontalGroup(
            QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QualityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(QualityPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(spinnerBeltSpeed3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QualityPanelLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerBeltLenght3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(QualityPanelLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(spinnerFailRange, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QualityPanelLayout.createSequentialGroup()
                        .addGroup(QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spinnerRobot2Pick, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerSealingTIme, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        QualityPanelLayout.setVerticalGroup(
            QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QualityPanelLayout.createSequentialGroup()
                .addGroup(QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(spinnerBeltSpeed3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerBeltLenght3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(spinnerFailRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerSealingTIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(QualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(spinnerRobot2Pick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        StartButton.setFont(new java.awt.Font("Tahoma", 1, 13));
        StartButton.setText("Start");
        StartButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 102), 1, true));
        StartButton.setName("start"); // NOI18N
        StartButton.setPreferredSize(new java.awt.Dimension(31, 17));
        StartButton.addActionListener(this);

        StopButton.setFont(new java.awt.Font("Tahoma", 1, 13));
        StopButton.setText("Stop");
        StopButton.setBorder(null);
        StopButton.setName("stop"); // NOI18N
        StopButton.addActionListener(this);

        EmergencyButton.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        EmergencyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cc/images/emergency.png"))); // NOI18N
        EmergencyButton.setText("Emergency Stop");
        EmergencyButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 0, 0), new java.awt.Color(102, 0, 0), new java.awt.Color(204, 0, 0), new java.awt.Color(102, 0, 0)));
        EmergencyButton.setName("emergency"); // NOI18N
        EmergencyButton.addActionListener(this);

        BlisterPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Robot", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel24.setText("Pick Cake (secs):");

        spinnerRobot1PickCake.setModel(new javax.swing.SpinnerNumberModel(0, 0, 20, 1));
        spinnerRobot1PickCake.setName("robotpickcake"); // NOI18N
        spinnerRobot1PickCake.addChangeListener(this);

        jLabel25.setText("Move Blister (secs):");

        spinnerRobot1MoveBlister.setModel(new javax.swing.SpinnerNumberModel(0, 0, 20, 1));
        spinnerRobot1MoveBlister.setName("robotmove"); // NOI18N
        spinnerRobot1MoveBlister.addChangeListener(this);

        javax.swing.GroupLayout BlisterPanel1Layout = new javax.swing.GroupLayout(BlisterPanel1);
        BlisterPanel1.setLayout(BlisterPanel1Layout);
        BlisterPanel1Layout.setHorizontalGroup(
            BlisterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BlisterPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BlisterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25))
                .addGap(71, 71, 71)
                .addGroup(BlisterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spinnerRobot1PickCake, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerRobot1MoveBlister, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        BlisterPanel1Layout.setVerticalGroup(
            BlisterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BlisterPanel1Layout.createSequentialGroup()
                .addGroup(BlisterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerRobot1PickCake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BlisterPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerRobot1MoveBlister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)))
        );

        spinnerRobot1PickCake.getAccessibleContext().setAccessibleName("robotpickcake");

        ResetButton.setFont(new java.awt.Font("Tahoma", 2, 13));
        ResetButton.setBorder(null);
        ResetButton.setText("Reset Default Values"); // NOI18N
        ResetButton.addActionListener(this);

        javax.swing.GroupLayout ControlTabLayout = new javax.swing.GroupLayout(ControlTab);
        ControlTab.setLayout(ControlTabLayout);
        ControlTabLayout.setHorizontalGroup(
            ControlTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ControlTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ControlTabLayout.createSequentialGroup()
                        .addGroup(ControlTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ResetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                            .addComponent(BlisterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ControlTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(CakePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BlisterPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(QualityPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(ControlTabLayout.createSequentialGroup()
                                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StopButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(ControlTabLayout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(ControlTabLayout.createSequentialGroup()
                        .addComponent(EmergencyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                        .addGap(13, 13, 13))))
        );
        ControlTabLayout.setVerticalGroup(
            ControlTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ControlTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CakePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BlisterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(QualityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BlisterPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(ResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ControlTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EmergencyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        TabbedPane.addTab("Control", ControlTab);

        LastExecution.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Last Execution:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel7.setForeground(new java.awt.Color(0, 153, 51));
        jLabel7.setText("Correct Blisters:");

        jLabel8.setForeground(new java.awt.Color(153, 0, 0));
        jLabel8.setText("Defectuous Blisters:");

        okblisters.setText("jLabel3");

        koblisters.setText("jLabel4");

        javax.swing.GroupLayout LastExecutionLayout = new javax.swing.GroupLayout(LastExecution);
        LastExecution.setLayout(LastExecutionLayout);
        LastExecutionLayout.setHorizontalGroup(
            LastExecutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LastExecutionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LastExecutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LastExecutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(koblisters)
                    .addComponent(okblisters))
                .addGap(27, 27, 27))
        );
        LastExecutionLayout.setVerticalGroup(
            LastExecutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LastExecutionLayout.createSequentialGroup()
                .addGroup(LastExecutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(okblisters))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LastExecutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(koblisters)
                    .addComponent(jLabel8))
                .addContainerGap())
        );

        History.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "History:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel5.setForeground(new java.awt.Color(153, 0, 0));
        jLabel5.setText("Defectuous Cakes:");

        jLabel6.setForeground(new java.awt.Color(0, 153, 51));
        jLabel6.setText("Correct Cakes:");

        okcake.setText("jLabel9");

        kocake.setText("jLabel10");

        javax.swing.GroupLayout HistoryLayout = new javax.swing.GroupLayout(History);
        History.setLayout(HistoryLayout);
        HistoryLayout.setHorizontalGroup(
            HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HistoryLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                        .addGap(45, 45, 45)
                        .addComponent(okcake))
                    .addGroup(HistoryLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(kocake)))
                .addGap(28, 28, 28))
        );
        HistoryLayout.setVerticalGroup(
            HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HistoryLayout.createSequentialGroup()
                .addGroup(HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(okcake))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(kocake))
                .addContainerGap())
        );

        Executions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Executions:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel19.setForeground(new java.awt.Color(153, 0, 0));
        jLabel19.setText("Stops:");

        jLabel20.setForeground(new java.awt.Color(0, 153, 51));
        jLabel20.setText("Starts:");

        jLabel21.setFont(new java.awt.Font("Tahoma", 2, 13));
        jLabel21.setForeground(new java.awt.Color(153, 0, 0));
        jLabel21.setText("Emergency Stops:");

        starts.setText("jLabel16");
        starts.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        stops.setText("jLabel27");

        emerstops.setText("jLabel28");

        jLabel29.setText("Clock Cicles:");

        cicles.setText("230");

        jLabel31.setText("Time Since Last Startup:");

        timelaststartup.setText("jLabel32");

        workingtime.setText("jLabel34");

        jLabel33.setText("Working time:");

        javax.swing.GroupLayout ExecutionsLayout = new javax.swing.GroupLayout(Executions);
        Executions.setLayout(ExecutionsLayout);
        ExecutionsLayout.setHorizontalGroup(
            ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExecutionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                    .addComponent(jLabel31)
                    .addComponent(jLabel29)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cicles)
                    .addComponent(emerstops)
                    .addComponent(timelaststartup)
                    .addComponent(workingtime)
                    .addComponent(stops)
                    .addComponent(starts))
                .addGap(27, 27, 27))
        );
        ExecutionsLayout.setVerticalGroup(
            ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExecutionsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stops))
                .addGap(7, 7, 7)
                .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emerstops))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(cicles))
                .addGap(18, 18, 18)
                .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(timelaststartup))
                .addGap(20, 20, 20)
                .addGroup(ExecutionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(workingtime))
                .addContainerGap())
        );

        GeneratePDF.setFont(new java.awt.Font("Tahoma", 1, 13));
        GeneratePDF.setText("Generate PDF Summary");
        GeneratePDF.addActionListener(this);

        javax.swing.GroupLayout ControlTab1Layout = new javax.swing.GroupLayout(ControlTab1);
        ControlTab1.setLayout(ControlTab1Layout);
        ControlTab1Layout.setHorizontalGroup(
            ControlTab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlTab1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ControlTab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ControlTab1Layout.createSequentialGroup()
                        .addComponent(LastExecution, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(ControlTab1Layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ControlTab1Layout.createSequentialGroup()
                        .addGroup(ControlTab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(History, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Executions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(ControlTab1Layout.createSequentialGroup()
                        .addComponent(GeneratePDF, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                        .addGap(9, 9, 9))))
        );
        ControlTab1Layout.setVerticalGroup(
            ControlTab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlTab1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(LastExecution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(History, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(Executions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(GeneratePDF, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Report", ControlTab1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("CakechuffControlPanel");

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == StartButton) {
            ControlInterface.this.StartButtonActionPerformed(evt);
        }
        else if (evt.getSource() == StopButton) {
            ControlInterface.this.StopButtonActionPerformed(evt);
        }
        else if (evt.getSource() == EmergencyButton) {
            ControlInterface.this.EmergencyButtonActionPerformed(evt);
        }
        else if (evt.getSource() == ResetButton) {
            ControlInterface.this.ResetButtonActionPerformed(evt);
        }
        else if (evt.getSource() == GeneratePDF) {
            ControlInterface.this.GeneratePDFActionPerformed(evt);
        }
    }

    public void stateChanged(javax.swing.event.ChangeEvent evt) {
        if (evt.getSource() == spinnerBeltSpeed2) {
            ControlInterface.this.spinnerBeltspeed2StateChanged(evt);
        }
        else if (evt.getSource() == spinnerBeltLenght2) {
            ControlInterface.this.spinnerbeltlenght2StateChanged(evt);
        }
        else if (evt.getSource() == spinnerBeltLenght1) {
            ControlInterface.this.spinnerbeltLenght1StateChanged(evt);
        }
        else if (evt.getSource() == spinnerChoc) {
            ControlInterface.this.spinnerChocStateChanged(evt);
        }
        else if (evt.getSource() == spinnerBeltSpeed1) {
            ControlInterface.this.spinnerBeltSpeedt1StateChanged(evt);
        }
        else if (evt.getSource() == spinnerCakesCapacity) {
            ControlInterface.this.spinnerCakesCapacityStateChanged(evt);
        }
        else if (evt.getSource() == spinnerCaramel) {
            ControlInterface.this.spinnerCaramelStateChanged(evt);
        }
        else if (evt.getSource() == spinnerBeltSpeed3) {
            ControlInterface.this.spinnerBeltspeed3StateChanged(evt);
        }
        else if (evt.getSource() == spinnerBeltLenght3) {
            ControlInterface.this.spinnerbeltlenght3Changed(evt);
        }
        else if (evt.getSource() == spinnerRobot2Pick) {
            ControlInterface.this.spinnerRobot2PickStateChanged(evt);
        }
        else if (evt.getSource() == spinnerSealingTIme) {
            ControlInterface.this.spinnerSealingTimeStateChanged(evt);
        }
        else if (evt.getSource() == spinnerFailRange) {
            ControlInterface.this.spinnerFailureRangeStateChanged(evt);
        }
        else if (evt.getSource() == spinnerRobot1PickCake) {
            ControlInterface.this.spinnerRobot1PickCakeStateChanged(evt);
        }
        else if (evt.getSource() == spinnerRobot1MoveBlister) {
            ControlInterface.this.spinnerRobot1MoveStateChanged(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void keepValuesToDB() {
        for (int i=0; i< _params.length ; i++){
            if (_params[i] != -1){
                switch (i){
                    case 0: 
                        _scada.setValues("ss1Info", "cakesCapacity", _params[0]+ "");
                        break;
                    case 1:
                        _scada.setValues("ss1Info", "conveyorSpeed", _params[1]+ "");
                        break;
                    case 2: 
                        _scada.setValues("ss1Info", "conveyorLenght", _params[2]+ "");
                        break;
                    case 3:
                        _scada.setValues("ss1Info", "v1", _params[3]+ "");
                        break;
                    case 4:
                        _scada.setValues("ss1Info", "v2", _params[4]+ "");
                        break;
                    case 5:
                        _scada.setValues("ss2Info", "conveyorSpeed", _params[5]+ "");
                        break;
                    case 6:
                        _scada.setValues("ss2Info", "conveyorLenght", _params[6]+ "");
                        break;
                    case 7:
                        _scada.setValues("ss3Info", "conveyorSpeed", _params[7]+ "");
                        break;
                    case 8:
                        _scada.setValues("ss3Info", "conveyorLenght", _params[8]+ "");
                        break;
                    case 9:
                        _scada.setValues("ss3Info", "failure_range", _params[9]+ "");
                        break;
                    case 10:
                        _scada.setValues("ss3Info", "time_pack", _params[10]+ "");
                        break;    
                    case 11:
                        _scada.setValues("ss3Info", "pick_blister", _params[11]+ "");
                        break;
                    case 12:
                        _scada.setValues("robot", "pick_blister", _params[12]+ "");
                        break;
                    case 13:
                        _scada.setValues("robot", "move_place_cake", _params[13]+ "");
                        break;
                }
            }
        }
    }

private void spinnerChocStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerChocStateChanged
    _params[3] = Integer.parseInt(this.spinnerChoc.getValue().toString());
}//GEN-LAST:event_spinnerChocStateChanged

private void spinnerbeltLenght1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerbeltLenght1StateChanged
     _params[2] = Integer.parseInt(this.spinnerBeltLenght1.getValue().toString());
}//GEN-LAST:event_spinnerbeltLenght1StateChanged

private void spinnerBeltSpeedt1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerBeltSpeedt1StateChanged
    _params[1] = Integer.parseInt(this.spinnerBeltSpeed1.getValue().toString());
}//GEN-LAST:event_spinnerBeltSpeedt1StateChanged

private void spinnerCakesCapacityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCakesCapacityStateChanged
    _params[0] = Integer.parseInt(this.spinnerCakesCapacity.getValue().toString());
}//GEN-LAST:event_spinnerCakesCapacityStateChanged

private void spinnerBeltspeed2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerBeltspeed2StateChanged
    _params[5] = Integer.parseInt(this.spinnerBeltSpeed2.getValue().toString());
}//GEN-LAST:event_spinnerBeltspeed2StateChanged

private void spinnerbeltlenght2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerbeltlenght2StateChanged
    _params[6] = Integer.parseInt(this.spinnerBeltLenght2.getValue().toString());
}//GEN-LAST:event_spinnerbeltlenght2StateChanged

private void spinnerBeltspeed3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerBeltspeed3StateChanged
    _params[7] = Integer.parseInt(this.spinnerBeltSpeed3.getValue().toString());
}//GEN-LAST:event_spinnerBeltspeed3StateChanged

private void spinnerbeltlenght3Changed(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerbeltlenght3Changed
    _params[8] = Integer.parseInt(this.spinnerBeltLenght3.getValue().toString());
}//GEN-LAST:event_spinnerbeltlenght3Changed

private void spinnerRobot2PickStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerRobot2PickStateChanged
    _params[11] = Integer.parseInt(this.spinnerRobot2Pick.getValue().toString());
}//GEN-LAST:event_spinnerRobot2PickStateChanged

private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
    
    //To begins the counter
    hasStarted = true;    
    
    //Disable this button, to avoid several orders of starts, and enable the
    //stops 
    this.StartButton.setEnabled(false);
    this.StopButton.setEnabled(true);
    this.EmergencyButton.setEnabled(true);
    
    //First check if the values are changed before the start, to send the update
    //info to the automatons
    this.keepValuesToDB();
    
    //Update the statistics    
    int prevValue = Integer.parseInt(this.starts.getText());
    prevValue++;
    this._scada.setStatistics("start", prevValue + "");
    this.starts.setText(prevValue + "");
    //Reset the history of blister
    this.koblisters.setText("0");
    this.okblisters.setText("0");
    this._scada.setStatistics("procesedPackages", "0");
    this._scada.setStatistics("faultyPackages", "0");
    
    //Send the initial info to master
    this._scada.sendtoMaster(_scada.sendInitInfo());   
    
}//GEN-LAST:event_StartButtonActionPerformed

private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
    
    this.StopButton.setEnabled(false);
    this.EmergencyButton.setEnabled(false);
    this.StartButton.setEnabled(true);
    
    //To reset the counter
    hasStarted = false; 
    initTime = 0;
    this.timelaststartup.setText("00:00:00");
    
    int prevValue = Integer.parseInt(this.stops.getText());
    prevValue++;
    this._scada.setStatistics("stops", prevValue + "");

    this.stops.setText(prevValue + "");

    //Keep the values to be persistant
    this.keepValuesToDB();
    
    //Send the order of stop to the master
    this._scada.sendtoMaster(_scada.stop()); 
}//GEN-LAST:event_StopButtonActionPerformed

private void EmergencyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmergencyButtonActionPerformed
    
    this.StopButton.setEnabled(false);
    this.EmergencyButton.setEnabled(false);
    this.StartButton.setEnabled(true);
    
    //To reset the counter
    hasStarted = false; 
    initTime = 0;
    this.timelaststartup.setText("00:00:00");

    //Keep that an emergency stop has happened
    int prevValue = Integer.parseInt(this.emerstops.getText());
    prevValue++;
    this._scada.setStatistics("emergency_stops", prevValue + "");

    this.emerstops.setText(prevValue + "");

    //Keep the values to be persistant
    this.keepValuesToDB();
    
    //Send the order of stop to the master
    this._scada.sendtoMaster(_scada.emergencyStop()); 
}//GEN-LAST:event_EmergencyButtonActionPerformed

private void GeneratePDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneratePDFActionPerformed
	
	//Set up the file chooser.
	if (fc == null) {
		fc = new JFileChooser();

		fc.addChoosableFileFilter(new FileNameExtensionFilter("pdf", "PDF", "PDF file"));
		fc.setAcceptAllFileFilterUsed(false);
	}

	//Show it.
	int returnVal = fc.showDialog(this, "Save File");

	//Process the results.
	if (returnVal == JFileChooser.APPROVE_OPTION) {

		File file = fc.getSelectedFile();
			
		GeneratePDF pdf = new GeneratePDF(file.getPath(),this.okblisters.getText(), this.koblisters.getText(),
				this.okcake.getText(), this.kocake.getText(), this.starts.getText(), 
				this.stops.getText(),this.emerstops.getText());
        
		if (pdf.generate()){
			this.setEnabled(false);
			new PDFCreated(this).setVisible(true);
		}else{
			this.setEnabled(false);
			new PDFFail(this).setVisible(true);
		}

        
    } else {
    	this.setEnabled(false);
		new PDFFail(this).setVisible(true);
    }
    //Reset the file chooser for the next time it's shown.
    fc.setSelectedFile(null);


}//GEN-LAST:event_GeneratePDFActionPerformed

private void spinnerCaramelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCaramelStateChanged
    _params[4] = Integer.parseInt(this.spinnerCaramel.getValue().toString());
}//GEN-LAST:event_spinnerCaramelStateChanged

private void spinnerRobot1PickCakeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerRobot1PickCakeStateChanged
   _params[12] = Integer.parseInt(this.spinnerRobot1PickCake.getValue().toString());
}//GEN-LAST:event_spinnerRobot1PickCakeStateChanged

private void spinnerRobot1MoveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerRobot1MoveStateChanged
    _params[13] = Integer.parseInt(this.spinnerRobot1MoveBlister.getValue().toString());
}//GEN-LAST:event_spinnerRobot1MoveStateChanged

private void spinnerSealingTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerSealingTimeStateChanged
    _params[10] = Integer.parseInt(this.spinnerSealingTIme.getValue().toString());
}//GEN-LAST:event_spinnerSealingTimeStateChanged

private void spinnerFailureRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerFailureRangeStateChanged
    _params[9] = Integer.parseInt(this.spinnerFailRange.getValue().toString());
}//GEN-LAST:event_spinnerFailureRangeStateChanged

private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
    this.setEnabled(false);
    new ConfirmationWindow(this._scada, this).setVisible(true);
}//GEN-LAST:event_ResetButtonActionPerformed

    public void updateValues(){

        this.spinnerCakesCapacity.setValue(Integer.parseInt(_scada.getValue("cakesCapacity", "ss1Info")));

        this.spinnerBeltSpeed1.setValue(Integer.parseInt(_scada.getValue("conveyorSpeed", "ss1Info")));

        this.spinnerBeltLenght1.setValue(Integer.parseInt(_scada.getValue("conveyorLenght", "ss1Info")));

        this.spinnerChoc.setValue(Integer.parseInt(_scada.getValue("v1", "ss1Info")));

        this.spinnerCaramel.setValue(Integer.parseInt(_scada.getValue("v2", "ss1Info")));

        this.spinnerBeltSpeed2.setValue(Integer.parseInt(_scada.getValue("conveyorSpeed", "ss2Info")));

        this.spinnerBeltLenght2.setValue(Integer.parseInt(_scada.getValue("conveyorLenght", "ss2Info")));

        this.spinnerBeltSpeed3.setValue(Integer.parseInt(_scada.getValue("conveyorSpeed", "ss3Info")));

        this.spinnerBeltLenght3.setValue(Integer.parseInt(_scada.getValue("conveyorLenght", "ss3Info")));

        this.spinnerFailRange.setValue(Integer.parseInt(_scada.getValue("failure_range", "ss3Info")));

        this.spinnerSealingTIme.setValue(Integer.parseInt(_scada.getValue("time_pack", "ss3Info")));

        this.spinnerRobot2Pick.setValue(Integer.parseInt(_scada.getValue("pick_blister", "ss3Info")));

        this.spinnerRobot1PickCake.setValue(Integer.parseInt(_scada.getValue("pick_blister", "robot")));

        this.spinnerRobot1MoveBlister.setValue(Integer.parseInt(_scada.getValue("move_place_cake", "robot")));
      
    }
    
    public void updateStadistics(){
        this.okblisters.setText(this._scada.getStatistics("procesedPackages"));
        this.koblisters.setText(this._scada.getStatistics("faultyPackages"));
        this.okcake.setText(this._scada.getStatistics("total_ok_cakes"));
        this.kocake.setText(this._scada.getStatistics("total_ko_cakes"));
        
        this.starts.setText(this._scada.getStatistics("start"));
        this.stops.setText(this._scada.getStatistics("stops"));
        this.emerstops.setText(this._scada.getStatistics("emergency_stops"));   
    }
    


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ControlInterface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(ControlInterface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(ControlInterface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ControlInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
                new ControlInterface().setVisible(true);
            }
        });
        
        

        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BlisterPanel;
    private javax.swing.JPanel BlisterPanel1;
    private javax.swing.JPanel CakePanel;
    private javax.swing.JPanel ControlTab;
    private javax.swing.JPanel ControlTab1;
    private javax.swing.JButton EmergencyButton;
    private javax.swing.JPanel Executions;
    private javax.swing.JButton GeneratePDF;
    private javax.swing.JPanel History;
    private javax.swing.JPanel LastExecution;
    private javax.swing.JPanel QualityPanel;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JLabel cicles;
    private javax.swing.JLabel emerstops;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel koblisters;
    private javax.swing.JLabel kocake;
    private javax.swing.JLabel okblisters;
    private javax.swing.JLabel okcake;
    private javax.swing.JSpinner spinnerBeltLenght1;
    private javax.swing.JSpinner spinnerBeltLenght2;
    private javax.swing.JSpinner spinnerBeltLenght3;
    private javax.swing.JSpinner spinnerBeltSpeed1;
    private javax.swing.JSpinner spinnerBeltSpeed2;
    private javax.swing.JSpinner spinnerBeltSpeed3;
    private javax.swing.JSpinner spinnerCakesCapacity;
    private javax.swing.JSpinner spinnerCaramel;
    private javax.swing.JSpinner spinnerChoc;
    private javax.swing.JSpinner spinnerFailRange;
    private javax.swing.JSpinner spinnerRobot1MoveBlister;
    private javax.swing.JSpinner spinnerRobot1PickCake;
    private javax.swing.JSpinner spinnerRobot2Pick;
    private javax.swing.JSpinner spinnerSealingTIme;
    private javax.swing.JLabel starts;
    private javax.swing.JLabel stops;
    private javax.swing.JLabel timelaststartup;
    private javax.swing.JLabel workingtime;
    // End of variables declaration//GEN-END:variables

/*	@Override
	public void update(Observable arg0, Object arg1) {}*/

}
